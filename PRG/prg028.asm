; Super Mario Bros. 3Mix by Southbird 2014
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; All 3Mix new code by Southbird!
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; FILENAME: prg028.bin, File Size: 8193, ORG: $A000
;     -> NES mode enabled
;---------------------------------------------------------------------------

Sound_Engine_Begin:
	LDA #$ff	 ; 
	STA FRAMECTR_CTL ; Resets the frame counter clock (sync sound hardware), disables IRQ generation

	LDA Sound_QPause
	BNE SndPause	 ; If a "pause/resume" was requested, jump to SndPause
	LDA Sound_IsPaused	
	BNE Sound_ProcessMusicOnly 	; If sound is currently paused, jump to PRG028_A08F (allows processing of pause sound)

	JMP Sound_Process	; Otherwise, jump to normal sound processing routine!

SndPause:	; $A017
	STA SndCur_Pause	 ; Store it into the "hold" variable
	STA Sound_IsPaused	 ; Mark sound as paused
	CMP #$02	 ; Is the request actually to RESUME sound?
	BNE PRG028_A033	 ; If not, go to PRG028_A033

	; Want to RESUME sound, not pause!
	LDA #$00
	STA Sound_IsPaused	 ; Clear IsPaused
	STA SndCur_Pause	 ; Clear the pause sound hold
	LDA #$0f	 ;  
	STA PAPU_EN	 ; Enable all channels
	BNE Sound_Process	 ; (Technically always) jump to Sound_Process

PRG028_A033:
	; Want to PAUSE sound

	; Clear sounds to prevent SFX jams
	LDA #$00
	STA PAPU_EN	; Disable all sound channels
	LDA #$0f	 ;  
	STA PAPU_EN	 ; Enable all channels

	BNE Sound_ProcessMusicOnly	; Jump (technically always) to Sound_ProcessMusicOnly

Sound_Process:

	; SB: Page 39 now handles sound effects!
	LDA #MMC3_8K_TO_PRG_C000	; Changing PRG ROM at C000
	STA MMC3_COMMAND 		; Set MMC3 command
	LDA #39					; SB: New, extended sound bank
	STA MMC3_PAGE	 		; Set MMC3 page

	; Queue + Play all sounds in...
	JSR Sound_PlayLevel2	 ; Level 2
	JSR Sound_PlayPlayer	 ; Player
	JSR Sound_PlayLevel1	 ; Level 1
	JSR Sound_PlayMapSounds	 ; Map sounds

Sound_ProcessMusicOnly:

	; SB: Enable inverted music -- except Set 1 songs
	LDA SndCur_Music1
	BNE Music_NoInvert
	
	; And some Set 2 songs
	LDA SndCur_Music2
	CMP #MUS2B_PSWITCH
	BEQ Music_NoInvert
	CMP #MUS2A_INVINCIBILITY
	BEQ Music_NoInvert
	CMP #MUS2B_PURPLECOMET
	BEQ Music_NoInvert

	LDA Music_InvertEn
	STA Music_Invert

Music_NoInvert:

	; Introduce the appropriate music bank
	LDA #MMC3_8K_TO_PRG_C000	; Changing PRG ROM at C000
	STA MMC3_COMMAND 		; Set MMC3 command
	LDA Music_MusBank		; SB: New, extended music bank
	STA MMC3_PAGE	 		; Set MMC3 page

	JSR Sound_PlayMusic	 ; Music

	; SB: "Music_RestH_Off" is now a flag for faster music play; it does not offset 
	; rest anymore because that's just not very compatible...
	LDA Music_RestH_Off
	BEQ Sound_NoSpeed

	LDA <Counter_1
	AND #4
	BNE Sound_NoSpeed	; Only do this 1:4 ticks

	JSR Sound_PlayMusic	 ; Music

Sound_NoSpeed:
	; Clear any music queues
	LDA #$00	 
	STA Sound_QMusic2
	STA Sound_QMusic1
	STA Music_Invert	; Don't invert sounds

PRG028_A08F:

	; Clear all sound queues
	LDA #$00
	STA Sound_QPlayer
	STA Sound_QLevel1
	STA Sound_QLevel2
	STA Sound_QMap
	STA Sound_QPause
	RTS		 ; Return


; Music segment header
; Each segment header is 7 bytes long:
MusSeg .macro
   .byte \1	; Music_RestH_Base value (always divisible by $10; base part of index into PRG031's Music_RestH_LUT)
   .word \2	; Address of music segment data (all tracks this segment, offsets to follow, except implied Square 2 zero)
   .byte \3	; Triangle track starting offset ($00 means disabled)
   .byte \4	; Square 1 track starting offset (cannot be disabled)
   .byte \5	; Noise track starting offset ($00 means disabled)
   .byte \6	; DCM track starting offset ($00 means disabled)
   .endm	; Square 2 cannot be disabled and always starts at offset $00


M12ASH .func \1-Music_Set1_Set2A_Headers	; "Music Set 1/2A Segment Header Offset"

	; SB: Refactored to use .word pointers so we can have more headers...
	; Each "index" of music is tied to a header of a "segment" of music.  Some segments are
	; reused where repetitious musical notes exist.  The segment headers are apparently not
	; stored in any particular order.  This table connects an index to a header:
Music_Set1_Set2A_HeaderLUT:
	; Index 0 - 7 are Set 1 songs, accessed by bit weight
	.word MS1_01SegHedr, MS1_02SegHedr, MS1_04SegHedr, MS1_08SegHedr	; Index $00-$03
	.word MS1_10SegHedr, MS1_20SegHedr, MS1_40SegHedr, MS1_80SegHedr	; Index $04-$07

	; 8+ are Set 2A
	.word MW1SegHedr00,  MW1SegHedr01,  MW2SegHedr00,  MW2SegHedr01 	; Index $08-$0B
	.word MS3SegHedr00,  MS3SegHedr01,  $0000, MW7SegHedr00		; Index $0C-$0F
	.word MW7SegHedr01,  MW7SegHedr02, MW5SegHedr00, MW5SegHedr01	; Index $10-$13
	.word MS2ASegHedr11, MS2ASegHedr0E, MS2ASegHedr04, MS2ASegHedr12	; Index $14-$17
	.word MS2ASegHedr03, MS2ASegHedr04, MS2ASegHedr00, MS2ASegHedr01	; Index $18-$1B
	.word MS2ASegHedr00, MS2ASegHedr02, MS2ASegHedr1A, MS2ASegHedr0D	; Index $1C-$1F
	.word MENSegHedr00, MENSegHedr01, MENSegHedr02, MENSegHedr03	; Index $20-$23
	.word MENSegHedr04, MENSegHedr05, MENSegHedr06, MENSegHedr07	; Index $24-$27
	.word MENSegHedr08, MENSegHedr09, MENSegHedr0A, MENSegHedr0B	; Index $28-$2B
	.word MENSegHedr0C, $0000, MW4SegHedr00, MW4SegHedr01		; Index $2C-$2F
	.word MW4SegHedr02,  MW4SegHedr03,  MW6SegHedr00, MW6SegHedr01		; Index $30-$33
	.word MW6SegHedr02 		; Index $34-$37

	.word M2BSegHedr57, M2BSegHedr58, M2BSegHedr59
	.word M2BSegHedr5A, M2BSegHedr5B, M2BSegHedr5C, M2BSegHedr5D
	.word M2BSegHedr5E, M2BSegHedr5F, M2BSegHedr60, M2BSegHedr61
	.word M2BSegHedr62, M2BSegHedr63, M2BSegHedr64, M2BSegHedr65
	.word M2BSegHedr66, M2BSegHedr67, M2BSegHedr68, M2BSegHedr69
	.word M2BSegHedr6A, M2BSegHedr6B, M2BSegHedr6C, M2BSegHedr6D
	.word M2BSegHedr6E, M2BSegHedr6F

Music_Set1_Set2A_Headers:
MS2ASegHedr00:	MusSeg $00, M12ASegData00, $00, $13, $00, $00
MS2ASegHedr01:	MusSeg $00, M12ASegData01, $00, $0F, $00, $00
MS2ASegHedr02:	MusSeg $00, M12ASegData02, $00, $0A, $00, $00
MS2ASegHedr03: 	MusSeg $00, M12ASegData03, $00, $0B, $00, $00
MS2ASegHedr04:	MusSeg $00, M12ASegData04, $2E, $19, $00, $00
MW2SegHedr00:	MusSeg $40, MW2SegData00, $87, $5D, $00, $00
MW2SegHedr01:	MusSeg $40, MW2SegData01, $B7, $6F, $00, $00
MW7SegHedr00:	MusSeg $40, MW7SegData00, $91, $29, $00, $00
MW7SegHedr01:	MusSeg $40, MW7SegData01, $91, $3B, $00, $00
MW7SegHedr02:	MusSeg $40, MW7SegData02, $1F, $11, $00, $00
MW1SegHedr00:	MusSeg $40, MW1SegData00, $67, $3B, $00, $8F
MS3SegHedr00:	MusSeg $40, MW3SegData00, $00, $47, $00, $00
MS3SegHedr01:	MusSeg $40, MW3SegData01, $00, $4D, $00, $00
MW1SegHedr01:	MusSeg $40, MW1SegData01, $6B, $45, $00, $91
MS2ASegHedr0D:	MusSeg $50, M12ASegData0D, $07, $04, $10, $00
MS2ASegHedr0E:	MusSeg $00, M12ASegData0E, $13, $0A, $00, $1C
MW5SegHedr00:	MusSeg $40, MW5SegData00, $71, $29, $00, $B9
MW5SegHedr01:	MusSeg $40, MW5SegData01, $69, $1F, $00, $AF
MS2ASegHedr11:	MusSeg $10, M12ASegData11, $29, $15, $37, $50
MS2ASegHedr12:	MusSeg $80, M12ASegData12, $37, $1A, $49, $4F
MS1_40SegHedr:	MusSeg $80, M12ASegData13, $35, $18, $00, $00
MS1_01SegHedr:	MusSeg $40, M12ASegData14, $6D, $35, $00, $95
MS1_04SegHedr:	MusSeg $30, M12ASegData15, $21, $11, $00, $31
MS1_20SegHedr:	MusSeg $40, M12ASegData16, $A3, $53, $00, $CF

; MS1_80SegHedr is the "stop music" request; have to look into this
; a little bit more to figure out how it works
MS1_80SegHedr:	.byte $60
		.word M12ASegData17		; Just lands at a $00 stop
		.byte $00			; Incomplete header??

MS1_02SegHedr:	MusSeg $30, M12ASegData18, $20, $12, $00, $00
MS1_08SegHedr:	MusSeg $40, M12ASegData19, $4D, $27, $00, $73
MS2ASegHedr1A:	MusSeg $30, M12ASegData1A, $29, $14, $00, $00
MS2ASegHedr1B:	MusSeg $00, M12ASegData1B, $00, $1B, $00, $00
MS2ASegHedr1C:	MusSeg $00, M12ASegData1C, $00, $21, $00, $00
MS1_10SegHedr:	MusSeg $30, M12ASegData24, $6F, $4C, $00, $BA
MW4SegHedr00:	MusSeg $40, MW4SegData00, $63, $27, $85, $00
MW4SegHedr01:	MusSeg $40, MW4SegData01, $57, $21, $75, $00
MW4SegHedr02:	MusSeg $40, MW4SegData02, $61, $25, $83, $00
MW4SegHedr03:	MusSeg $40, MW4SegData03, $57, $19, $69, $00
MW6SegHedr00:	MusSeg $40, MW6SegData00, $53, $35, $00, $93
MW6SegHedr01:	MusSeg $40, MW6SegData01, $4F, $35, $00, $97
MW6SegHedr02:	MusSeg $40, MW6SegData02, $3D, $37, $00, $7F

MENSegHedr00:	MusSeg $40, MENSegData00, $2F, $27, $00, $83	; BEGIN SML Ending
MENSegHedr01:	MusSeg $40, MENSegData01, $33, $27, $00, $87
MENSegHedr02:	MusSeg $40, MENSegData02, $2F, $27, $00, $83
MENSegHedr03:	MusSeg $40, MENSegData03, $2F, $27, $00, $83
MENSegHedr04:	MusSeg $40, MENSegData04, $33, $27, $00, $6B
MENSegHedr05:	MusSeg $40, MENSegData05, $39, $29, $00, $85
MENSegHedr06:	MusSeg $40, MENSegData06, $3B, $2B, $00, $87
MENSegHedr07:	MusSeg $40, MENSegData07, $39, $29, $00, $85
MENSegHedr08:	MusSeg $40, MENSegData08, $29, $1D, $00, $8B
MENSegHedr09:	MusSeg $40, MENSegData09, $2F, $23, $00, $7D
MENSegHedr0A:	MusSeg $40, MENSegData0A, $31, $25, $00, $A9
MENSegHedr0B:	MusSeg $40, MENSegData0B, $25, $1D, $00, $75
MENSegHedr0C:	MusSeg $40, MENSegData0C, $11, $09, $00, $61

M2BSegHedr57:		MusSeg $40, MXXSegData00, $39, $35, $00, $3D
M2BSegHedr58:		MusSeg $40, MXXSegData01, $45, $41, $00, $49
M2BSegHedr59:		MusSeg $40, MXXSegData02, $3F, $2D, $00, $43
M2BSegHedr5A:		MusSeg $40, MXXSegData03, $51, $31, $00, $55
M2BSegHedr5B:		MusSeg $40, MXXSegData04, $3D, $25, $00, $41
M2BSegHedr5C:		MusSeg $40, MXXSegData05, $31, $21, $00, $35
M2BSegHedr5D:		MusSeg $40, MXXSegData06, $43, $31, $00, $47
M2BSegHedr5E:		MusSeg $40, MXXSegData07, $33, $29, $00, $37
M2BSegHedr5F:		MusSeg $40, MXXSegData08, $39, $35, $00, $3D
M2BSegHedr60:		MusSeg $40, MXXSegData09, $45, $31, $00, $49
M2BSegHedr61:		MusSeg $40, MXXSegData0A, $00, $35, $00, $55
M2BSegHedr62:		MusSeg $40, MXXSegData0B, $49, $35, $00, $4D
M2BSegHedr63:		MusSeg $40, MXXSegData0C, $00, $3B, $00, $3F
M2BSegHedr64:		MusSeg $40, MXXSegData0D, $0D, $05, $00, $11
M2BSegHedr65:		MusSeg $40, MXXSegData0E, $0D, $05, $00, $13
M2BSegHedr66:		MusSeg $40, MXXSegData0F, $23, $15, $00, $27
M2BSegHedr67:		MusSeg $40, MXXSegData10, $23, $1F, $00, $29
M2BSegHedr68:		MusSeg $40, MXXSegData11, $21, $09, $00, $25
M2BSegHedr69:		MusSeg $40, MXXSegData12, $1D, $05, $00, $21
M2BSegHedr6A:		MusSeg $40, MXXSegData13, $29, $11, $00, $2D
M2BSegHedr6B:		MusSeg $40, MXXSegData14, $21, $11, $00, $25
M2BSegHedr6C:		MusSeg $40, MXXSegData15, $57, $35, $00, $5B
M2BSegHedr6D:		MusSeg $40, MXXSegData16, $41, $3D, $00, $45
M2BSegHedr6E:		MusSeg $40, MXXSegData17, $67, $35, $00, $6B
M2BSegHedr6F:		MusSeg $40, MXXSegData18, $75, $3D, $00, $79
	; Music in Set 2A is played by "index", which is a segment of music.
	; The index always advances, though what that index actually represents
	; may be a reused segment of music.

	; These three LUTs are to be read vertically for each Set 2A song to
	; be played ($1, $2, $3, ... $F), so that song $1 uses a start
	; index of $08, an end index of $09, and a loop index of $08.

Music_Set2A_Starts:
	.byte $08, $0A, $0C, $2E, $12, $32, $0F, $15, $16, $17, $35, $1A, $1E, $1F, $20

Music_Set2A_Ends:
	.byte $09, $0B, $0D, $31, $13, $34, $11, $15, $16, $17, $4D, $1D, $1E, $1F, $2C

Music_Set2A_Loops:
	.byte $08, $0A, $0C, $2E, $12, $32, $0F, $15, $16, $17, $35, $1A, $1E, $1F, $24

	; SB: New: Bank of song
Music_Set1_Bank:
	.byte  36,  36,  36,  36,  36,  36,  36,  36
	
Music_Set2A_Bank:
	.byte  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  39,  36,  36,  36,  35


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INSTRUMENT PATCHES
; For music playback:
; These define values for a given patch value and note length, which properly
; configure square wave generators for a given note length.  Note that the PatL
; sets are used when the current track rest rate is >= 19, otherwise the PatS
; values are used in place.  These tables just define bytes supplied to the
; respective PAPU_CTLx register to configure the waveform.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PatL1:	.byte $90, $92, $94, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95
	.byte $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95
	.byte $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95
	.byte $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $96, $96, $15, $17, $58, $1A

PatS1:	.byte $90, $92, $94, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95, $95
	.byte $95, $96, $96, $15, $17, $58, $1A

PatL2:	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $51, $51, $51, $51, $51
	.byte $52, $52, $52, $53, $53, $53, $54, $54, $55, $55, $56, $56, $57, $58, $59, $1A

PatS2:	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $51, $51, $52, $52
	.byte $53, $54, $55, $56, $57, $59, $1A

PatL3:	.byte $90, $91, $91, $91, $92, $92, $92, $93, $93, $94, $94, $94, $94, $95, $95, $95
	.byte $95, $96, $96, $96, $97, $97, $97, $97, $97, $97, $97, $98, $98, $98, $98, $98
	.byte $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98, $98
	.byte $98, $98, $98, $98, $98, $98, $98, $98, $99, $99, $99, $9A, $9A, $99, $98, $97

PatS3:	.byte $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $91, $91, $91, $93, $95
	.byte $97, $98, $99, $9A, $9A, $99, $98

	.byte $97	; ?? A mistake?

PatL4:	.byte $94, $95, $95, $95, $95, $95, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
	.byte $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
	.byte $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
	.byte $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $97, $97, $97, $98, $98, $98

PatS4:	.byte $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90
	.byte $90, $90, $97, $97, $98, $98, $98

PatS5:	.byte $51, $51, $52, $52, $53, $53, $53, $54, $54, $55, $56, $57, $57, $57, $57, $56
	.byte $56, $56, $55, $55, $54, $53, $53

PatL5:	.byte $51, $51, $51, $51, $51, $51, $52, $52, $52, $52, $52, $52, $52, $52, $52, $52
	.byte $52, $52, $52, $52, $52, $53, $53, $53, $53, $53, $54, $54, $54, $54, $54, $54
	.byte $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $56, $56, $56, $56, $57, $57
	.byte $57, $57, $57, $57, $57, $57, $57, $57, $56, $56, $56, $55, $55, $54, $53, $53

PatS6:	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $51, $52, $53
	.byte $54, $55, $56, $57, $58, $59, $5A

PatL6:	.byte $50, $50, $50, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $52, $52, $53
	.byte $50, $50, $51, $51, $51, $51, $52, $52, $52, $52, $53, $53, $53, $54, $54, $55
	.byte $50, $51, $51, $52, $52, $52, $53, $53, $53, $54, $54, $55, $55, $56, $56, $57
	.byte $51, $52, $52, $52, $53, $53, $54, $54, $55, $55, $56, $56, $57, $58, $59, $5A


PatL8:	.byte $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50 
	.byte $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
	.byte $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
	.byte $51, $51, $51, $51, $51, $51, $52, $53, $54, $55, $56, $57, $58, $19, $DA, $9B 

PatS8:	.byte $50, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $53, $54
	.byte $55, $56, $57, $58, $19, $DA, $9B

	.byte $15, $07, $C8, $E8, $E0, $03, $D0, $F4

	; SB: Refactored to use .word pointers so we can have more headers...
	; Each "index" of music is tied to a header of a "segment" of music.  Some segments are
	; reused where repetitious musical notes exist.  The segment headers are apparently not
	; stored in any particular order.  This table connects an index to a header:
Music_Set2B_HeaderLUT:
	.word M2BSegHedr0F, M2BSegHedr10, M2BSegHedr11, M2BSegHedr10	; Index $00-$03
	.word M2BSegHedr12, M2BSegHedr13, M2BSegHedr14, M2BSegHedr1B	; Index $04-$07
	.word M2BSegHedr0C, M2BSegHedr0D, M2BSegHedr0D, M2BSegHedr0E	; Index $08-$0B
	.word M2BSegHedr08, M2BSegHedr08, M2BSegHedr09, M2BSegHedr1C	; Index $0C-$0F
	.word M2BSegHedr1D, M2BSegHedr1D, M2BSegHedr1E, M2BSegHedr0A	; Index $10-$13
	.word M2BSegHedr0B, M2BSegHedr17, M2BSegHedr18, M2BSegHedr18	; Index $14-$17
	.word M2BSegHedr19, M2BSegHedr19, M2BSegHedr1A, M2BSegHedr15	; Index $18-$1B
	.word M2BSegHedr15, M2BSegHedr16, M2BSegHedr00, M2BSegHedr01	; Index $1C-$1F
	.word M2BSegHedr02, M2BSegHedr03, M2BSegHedr04, M2BSegHedr05	; Index $20-$23
	.word M2BSegHedr06, M2BSegHedr05, M2BSegHedr07, M2BSegHedr1F	; Index $24-$27
	.word M2BSegHedr20, M2BSegHedr21, M2BSegHedr22, M2BSegHedr23	; Index $28-$2B
	.word M2BSegHedr24, M2BSegHedr25, M2BSegHedr26, M2BSegHedr27	; Index $2C-$2F
	.word M2BSegHedr28, M2BSegHedr29, MS2ASegHedr1B, MS2ASegHedr1B	; Index $30-$33
	.word MS2ASegHedr1C, M2BSegHedr2A, M2BSegHedr2B, M2BSegHedr2C	; Index $34-$37
	.word M2BSegHedr2D, M2BSegHedr2E, M2BSegHedr2F, M2BSegHedr30	; Index $38-$3B
	.word M2BSegHedr31, M2BSegHedr32, M2BSegHedr33, M2BSegHedr34	; Index $3C-$3F
	.word M2BSegHedr35, M2BSegHedr36, M2BSegHedr37, M2BSegHedr38	; Index $40-$43
	.word M2BSegHedr39		; Index $44
	
	.word M2BSegHedr3A, M2BSegHedr3B, M2BSegHedr3C, M2BSegHedr3D
	.word M2BSegHedr3E, M2BSegHedr3F, M2BSegHedr40, M2BSegHedr41
	.word M2BSegHedr42, M2BSegHedr43, M2BSegHedr44, M2BSegHedr45
	.word M2BSegHedr46, M2BSegHedr47, M2BSegHedr48, M2BSegHedr49
	.word M2BSegHedr4A, M2BSegHedr4B, M2BSegHedr4C, M2BSegHedr4D
	.word M2BSegHedr4E, M2BSegHedr4F, M2BSegHedr50, M2BSegHedr51
	.word M2BSegHedr52, M2BSegHedr53, M2BSegHedr54, M2BSegHedr55
	.word M2BSegHedr56
		
Music_Set2B_Headers:
	; The following is all of the segment headers for Set 2B music.
	; Tempo, Track Base Offset, Triangle offset, Square 1 offset, Noise offset, DCM offset (Square 2 is always assumed @ 0)
	; Note that Triangle, Noise, and DCM tracks are allowed to be disabled by using an offset of 0, but Squares 1/2 are not.
	; Of course, this wouldn't be hard to implement or anything, it's just the way it was coded...
M2BSegHedr00:	MusSeg $30, M2BSegData00, $21, $11, $00, $00
M2BSegHedr01:	MusSeg $30, M2BSegData01, $32, $15, $73, $83
M2BSegHedr02:	MusSeg $30, M2BSegData02, $23, $12, $32, $42
M2BSegHedr03:	MusSeg $30, M2BSegData01, $32, $29, $73, $83
M2BSegHedr04:	MusSeg $30, M2BSegData03, $52, $29, $7B, $8B
M2BSegHedr05:	MusSeg $30, M2BSegData04, $26, $15, $68, $6E
M2BSegHedr06:	MusSeg $30, M2BSegData05, $23, $13, $32, $38
M2BSegHedr07:	MusSeg $30, M2BSegData06, $36, $1C, $46, $59
M2BSegHedr08:	MusSeg $00, M2BSegData07, $1F, $10, $00, $2E
M2BSegHedr09:	MusSeg $00, M2BSegData08, $15, $0A, $00, $1E
M2BSegHedr0A:	MusSeg $00, M2BSegData09, $19, $0D, $00, $29
M2BSegHedr0B:	MusSeg $00, M2BSegData0A, $51, $29, $7D, $88
M2BSegHedr0C:	MusSeg $00, M2BSegData0B, $19, $0D, $00, $00
M2BSegHedr0D:	MusSeg $00, M2BSegData0C, $37, $1C, $B2, $B8
M2BSegHedr0E:	MusSeg $00, M2BSegData0D, $39, $1D, $5A, $60
M2BSegHedr0F:	MusSeg $30, M2BSegData0E, $29, $18, $41, $45
M2BSegHedr10:	MusSeg $30, M2BSegData0F, $54, $2C, $AF, $BE
M2BSegHedr11:	MusSeg $30, M2BSegData10, $50, $2B, $95, $A4
M2BSegHedr12:	MusSeg $30, M2BSegData11, $21, $12, $2F, $48
M2BSegHedr13:	MusSeg $30, M2BSegData12, $69, $35, $7A, $89
M2BSegHedr14:	MusSeg $30, M2BSegData13, $5F, $30, $72, $81
M2BSegHedr15:	MusSeg $00, M2BSegData14, $27, $14, $00, $70
M2BSegHedr16:	MusSeg $00, M2BSegData15, $27, $14, $00, $38
M2BSegHedr17:	MusSeg $30, M2BSegData16, $0D, $07, $00, $13
M2BSegHedr18:	MusSeg $30, M2BSegData17, $2B, $00, $3C, $42
M2BSegHedr19:	MusSeg $30, M2BSegData18, $28, $16, $39, $3F
M2BSegHedr1A:	MusSeg $30, M2BSegData19, $43, $22, $64, $85
M2BSegHedr1B:	MusSeg $50, M2BSegData1A, $4B, $00, $AE, $95
M2BSegHedr1C:	MusSeg $40, M2BSegData1B, $31, $19, $3C, $59
M2BSegHedr1D:	MusSeg $40, M2BSegData1C, $45, $23, $5C, $62
M2BSegHedr1E:	MusSeg $40, M2BSegData1D, $45, $23, $64, $6A
M2BSegHedr1F:	MusSeg $70, M2BSegData1E, $1B, $0E, $28, $00
M2BSegHedr20:	MusSeg $70, M2BSegData1F, $43, $22, $6E, $78
M2BSegHedr21:	MusSeg $70, M2BSegData1F, $48, $22, $6E, $78
M2BSegHedr22:	MusSeg $70, M2BSegData1F, $53, $22, $6E, $78
M2BSegHedr23:	MusSeg $70, M2BSegData1F, $65, $22, $6E, $78
M2BSegHedr24:	MusSeg $40, M2BSegData1B, $31, $19, $00, $00
M2BSegHedr25:	MusSeg $40, MPSWSegData00, $91, $61, $D9, $00
M2BSegHedr26:	MusSeg $40, MPSWSegData01, $4D, $33, $67, $00
M2BSegHedr27:	MusSeg $40, MPSWSegData02, $7F, $4F, $AF, $00
M2BSegHedr28:	MusSeg $40, MPSWSegData03, $AF, $6B, $00, $00
M2BSegHedr29:	MusSeg $40, MPSWSegData04, $5D, $37, $00, $00
		
M2BSegHedr2A:	MusSeg $40, MTISegData00, $00, $05, $17, $2D
M2BSegHedr2B:	MusSeg $40, MTISegData01, $55, $2F, $81, $CD
M2BSegHedr2C:	MusSeg $40, MTISegData02, $4B, $2B, $73, $BD
M2BSegHedr2D:	MusSeg $40, MTISegData03, $57, $2D, $81, $CD
M2BSegHedr2E:	MusSeg $40, MTISegData04, $3D, $21, $5B, $8D
M2BSegHedr2F:	MusSeg $40, MTISegData05, $3F, $21, $5F, $91
M2BSegHedr30:	MusSeg $40, MTISegData06, $4B, $2D, $73, $A9
M2BSegHedr31:	MusSeg $40, MTISegData07, $59, $2F, $87, $A6
M2BSegHedr32:	MusSeg $40, MTISegData08, $4D, $2D, $77, $A2
M2BSegHedr33:	MusSeg $40, MTISegData09, $5F, $33, $91, $BC
M2BSegHedr34:	MusSeg $40, MTISegData0A, $3D, $1F, $67, $90
M2BSegHedr35:	MusSeg $40, MTISegData0B, $4D, $25, $6F, $9C
M2BSegHedr36:	MusSeg $40, MTISegData0C, $00, $07, $0B, $3B

M2BSegHedr37:	MusSeg $40, MVISegData00, $71, $39, $00, $C1	; BEGIN Victory song
M2BSegHedr38:	MusSeg $40, MVISegData01, $59, $2D, $00, $AD
M2BSegHedr39:	MusSeg $40, MVISegData02, $2F, $19, $45, $6B

M2BSegHedr3A:	MusSeg $40, MPCSegData00, $00, $5B, $00, $81	; BEGIN Purple Comet
M2BSegHedr3B:	MusSeg $40, MPCSegData01, $75, $3D, $00, $8F
M2BSegHedr3C:	MusSeg $40, MPCSegData02, $65, $3D, $00, $91
M2BSegHedr3D:	MusSeg $40, MPCSegData03, $65, $3D, $00, $91
M2BSegHedr3E:	MusSeg $40, MPCSegData04, $65, $3D, $00, $91
M2BSegHedr3F:	MusSeg $40, MPCSegData05, $5F, $3D, $00, $79
M2BSegHedr40:	MusSeg $40, MPCSegData06, $00, $3D, $00, $77
M2BSegHedr41:	MusSeg $40, MPCSegData07, $73, $3D, $00, $8D
M2BSegHedr42:	MusSeg $40, MPCSegData08, $63, $3D, $00, $8F
M2BSegHedr43:	MusSeg $40, MPCSegData09, $63, $3D, $00, $8F
M2BSegHedr44:	MusSeg $40, MPCSegData0A, $63, $3D, $00, $8F
M2BSegHedr45:	MusSeg $40, MPCSegData0B, $65, $3D, $00, $7B
M2BSegHedr46:	MusSeg $40, MPCSegData0C, $00, $3D, $00, $77
M2BSegHedr47:	MusSeg $40, MPCSegData0D, $57, $39, $00, $75
M2BSegHedr48:	MusSeg $40, MPCSegData0E, $37, $2F, $00, $87
M2BSegHedr49:	MusSeg $40, MPCSegData0F, $3D, $29, $00, $71
M2BSegHedr4A:	MusSeg $40, MPCSegData10, $6F, $29, $00, $A1
M2BSegHedr4B:	MusSeg $40, MPCSegData11, $37, $1D, $00, $81
M2BSegHedr4C:	MusSeg $40, MPCSegData12, $3B, $1F, $00, $8B
M2BSegHedr4D:	MusSeg $40, MPCSegData13, $53, $2B, $00, $9D
M2BSegHedr4E:	MusSeg $40, MPCSegData14, $29, $17, $00, $4D
M2BSegHedr4F:	MusSeg $40, MPCSegData15, $7D, $61, $00, $A1
M2BSegHedr50:	MusSeg $40, MPCSegData16, $25, $0B, $00, $6F
M2BSegHedr51:	MusSeg $40, MPCSegData17, $27, $0B, $00, $77
M2BSegHedr52:	MusSeg $40, MPCSegData18, $2F, $0B, $00, $79
M2BSegHedr53:	MusSeg $40, MPCSegData19, $2F, $09, $00, $79
M2BSegHedr54:	MusSeg $40, MPCSegData1A, $43, $3D, $00, $49
M2BSegHedr55:	MusSeg $40, MPCSegData1B, $00, $3D, $00, $43
M2BSegHedr56:	MusSeg $40, MPCSegData1C, $00, $09, $00, $0F



	; Music in Set 2B is played by "index", which is a segment of music.
	; The index always advances, though what that index actually represents
	; may be a reused segment of music.

	; These three LUTs are to be read vertically for each Set 2B song to
	; be played ($10, $20, $30, ... $C0), so that song $10 uses a start
	; index of $00, an end index of $06, and a loop index of $01.
Music_Set2B_Starts:
	.byte $00, $07, $08, $0C, $0F, $13, $15, $1B, $1E, $2D, $27, $45, $32, $35, $42

Music_Set2B_Ends:
	.byte $06, $07, $0B, $0E, $12, $14, $1A, $1D, $26, $31, $2B, $60, $34, $41, $44

Music_Set2B_Loops:
	.byte $01, $07, $09, $0C, $10, $13, $18, $1B, $1F, $31, $28, $45, $32, $36,   0

	; SB: New: Bank of song
Music_Set2B_Bank:
	.byte  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  38,  36,  33,  33



M2CSH .func \1-Music_Set2C_Headers	; "Music Set 3 Segment Header Offset"


	; Each "index" of music is tied to a header of a "segment" of music.  Some segments are
	; reused where repetitious musical notes exist.  The segment headers are apparently not
	; stored in any particular order.  This table connects an index to a header:
Music_Set2C_HeaderLUT:
	.word $00	; Avoiding index $00 because it fails to loop
	.word M2CSegHedr01, M2CSegHedr02, M2CSegHedr03, M2CSegHedr04
	.word M2CSegHedr05, M2CSegHedr06, M2CSegHedr07, M2CSegHedr08
	.word M2CSegHedr09, M2CSegHedr0A, M2CSegHedr0B, M2CSegHedr0C
	.word M2CSegHedr0D, M2CSegHedr0E, M2CSegHedr0F, M2CSegHedr10
	.word M2CSegHedr11, M2CSegHedr12, M2CSegHedr13, M2CSegHedr14
	.word M2CSegHedr15, M2CSegHedr16, M2CSegHedr17, M2CSegHedr18
	.word M2CSegHedr19, M2CSegHedr1A, M2CSegHedr1B, M2CSegHedr1C
	.word M2CSegHedr1D, M2CSegHedr1E, M2CSegHedr1F, M2CSegHedr20
	.word M2CSegHedr21, M2CSegHedr22, M2CSegHedr23, M2CSegHedr24
	.word M2CSegHedr25, M2CSegHedr26, M2CSegHedr27, M2CSegHedr28
	.word M2CSegHedr29, M2CSegHedr2A, M2CSegHedr2B, M2CSegHedr2C
	.word M2CSegHedr2D, M2CSegHedr2E, M2CSegHedr2F, M2CSegHedr30
	.word M2CSegHedr31, M2CSegHedr32, M2CSegHedr33, M2CSegHedr34
	.word M2CSegHedr35, M2CSegHedr36, M2CSegHedr37, M2CSegHedr38
	.word M2CSegHedr39, M2CSegHedr3A, M2CSegHedr3B, M2CSegHedr3C
	.word M2CSegHedr3D, M2CSegHedr3E, M2CSegHedr3F, M2CSegHedr40
	.word M2CSegHedr41, M2CSegHedr42, M2CSegHedr43, M2CSegHedr44
	.word M2CSegHedr45, M2CSegHedr46, M2CSegHedr47, M2CSegHedr48
	.word M2CSegHedr49, M2CSegHedr4A, M2CSegHedr4B, M2CSegHedr4C
	.word M2CSegHedr4D, M2CSegHedr4E, M2CSegHedr4F, M2CSegHedr50
	.word M2CSegHedr51, M2CSegHedr52, M2CSegHedr53, M2CSegHedr54
	.word M2CSegHedr55, M2CSegHedr56, M2CSegHedr57, M2CSegHedr58
	.word M2CSegHedr59, M2CSegHedr5A, M2CSegHedr5B, M2CSegHedr5C
	.word M2CSegHedr5D, M2CSegHedr5E, M2CSegHedr5F, M2CSegHedr60
	.word M2CSegHedr61, M2CSegHedr62, M2CSegHedr63, M2CSegHedr64
	.word M2CSegHedr65, M2CSegHedr66, M2CSegHedr67, M2CSegHedr68
	.word M2CSegHedr69, M2CSegHedr6A, M2CSegHedr6B, M2CSegHedr6C
	.word M2CSegHedr6D, M2CSegHedr6E, M2CSegHedr6F, M2CSegHedr70
	.word M2CSegHedr71, M2CSegHedr72, M2CSegHedr73, M2CSegHedr74
	.word M2CSegHedr75, M2CSegHedr76, M2CSegHedr77, M2CSegHedr78
	.word M2CSegHedr79, M2CSegHedr7A, M2CSegHedr7B, M2CSegHedr7C
	.word M2CSegHedr7D, M2CSegHedr7E, M2CSegHedr7F, M2CSegHedr80
	.word M2CSegHedr81, M2CSegHedr82, M2CSegHedr83, M2CSegHedr84
	.word M2CSegHedr85, M2CSegHedr86, M2CSegHedr87, M2CSegHedr88
	.word M2CSegHedr89, M2CSegHedr8A, M2CSegHedr8B, M2CSegHedr8C
	.word M2CSegHedr8D, M2CSegHedr8E, M2CSegHedr8F, M2CSegHedr90
	.word M2CSegHedr91, M2CSegHedr92, M2CSegHedr93, M2CSegHedr94
	.word M2CSegHedr95, M2CSegHedr96, M2CSegHedr97, M2CSegHedr98
	.word M2CSegHedr99, M2CSegHedr9A, M2CSegHedr9B, M2CSegHedr9C
	.word M2CSegHedr9D, M2CSegHedr9E, M2CSegHedr9F, M2CSegHedrA0
	.word M2CSegHedrA1, M2CSegHedrA2, M2CSegHedrA3, M2CSegHedrA4
	.word M2CSegHedrA5, M2CSegHedrA6, M2CSegHedrA7, M2CSegHedrA8
	.word M2CSegHedrA9, M2CSegHedrAA, M2CSegHedrAB, M2CSegHedrAC
	.word M2CSegHedrAD, M2CSegHedrAE, M2CSegHedrAF, M2CSegHedrB0
	.word M2CSegHedrB1, M2CSegHedrB2, M2CSegHedrB3
	
Music_Set2C_Headers:
	; The following is all of the segment headers for Set 2C music.
	; See notes from Music_Set2B_Headers
M2CSegHedr01:	MusSeg $40, M2CSegData01, $4F, $29, $5D, $83	; BEGIN Boss 2
M2CSegHedr02:	MusSeg $40, M2CSegData02, $45, $23, $55, $77
M2CSegHedr03:	MusSeg $40, M2CSegData03, $49, $25, $59, $7D
M2CSegHedr04:	MusSeg $40, M2CSegData04, $4D, $27, $5D, $83
M2CSegHedr05:	MusSeg $40, M2CSegData05, $43, $23, $55, $75
M2CSegHedr06:	MusSeg $40, M2CSegData06, $4F, $29, $5F, $85
M2CSegHedr07:	MusSeg $40, M2CSegData07, $41, $21, $51, $71
M2CSegHedr08:	MusSeg $40, M2CSegData08, $4D, $27, $5D, $83
M2CSegHedr09:	MusSeg $40, MGESegData00, $59, $2F, $00, $79	; BEGIN Good Egg
M2CSegHedr0A:	MusSeg $40, MGESegData01, $47, $25, $00, $69
M2CSegHedr0B:	MusSeg $40, MGESegData02, $3D, $1F, $00, $5B
M2CSegHedr0C:	MusSeg $40, MGESegData03, $2F, $19, $00, $57
M2CSegHedr0D:	MusSeg $40, MGESegData04, $41, $21, $00, $75
M2CSegHedr0E:	MusSeg $40, MGESegData05, $3B, $1F, $00, $5B
M2CSegHedr0F:	MusSeg $40, MGESegData06, $23, $13, $00, $69
M2CSegHedr10:	MusSeg $40, MGESegData07, $23, $1D, $00, $75
M2CSegHedr11:	MusSeg $40, MGESegData08, $27, $1F, $00, $37
M2CSegHedr12:	MusSeg $40, MGESegData09, $39, $1D, $00, $43
M2CSegHedr13:	MusSeg $40, MGESegData0A, $1F, $11, $00, $83
M2CSegHedr14:	MusSeg $40, MGESegData0B, $5F, $31, $00, $6F
M2CSegHedr15:	MusSeg $40, MGESegData0C, $37, $17, $00, $43
M2CSegHedr16:	MusSeg $40, MGESegData0D, $19, $07, $00, $63
M2CSegHedr17:	MusSeg $40, MGESegData0E, $1B, $09, $00, $73
M2CSegHedr18:	MusSeg $40, MGESegData0F, $33, $1B, $00, $A3
M2CSegHedr19:	MusSeg $40, MGESegData10, $43, $33, $00, $73
M2CSegHedr1A:	MusSeg $40, MGESegData11, $3F, $2F, $00, $6B
M2CSegHedr1B:	MusSeg $40, MGESegData12, $5B, $35, $00, $8D
M2CSegHedr1C:	MusSeg $40, MGESegData13, $49, $27, $00, $6B
M2CSegHedr1D:	MusSeg $40, MGESegData14, $3F, $23, $00, $5D
M2CSegHedr1E:	MusSeg $40, MGESegData15, $53, $2B, $00, $7B
M2CSegHedr1F:	MusSeg $40, MLESegData00, $B9, $61, $00, $00	; BEGIN Letter
M2CSegHedr20:	MusSeg $40, MCOSegData00, $9F, $45, $00, $AD	; BEGIN "Coopa"
M2CSegHedr21:	MusSeg $40, MCOSegData01, $A5, $45, $00, $B5
M2CSegHedr22:	MusSeg $40, MCOSegData02, $AB, $49, $00, $BF
M2CSegHedr23:	MusSeg $40, MG1SegData00, $7F, $71, $8D, $00	; BEGIN NSMB Ghost House
M2CSegHedr24:	MusSeg $40, MG1SegData01, $A1, $55, $00, $00
M2CSegHedr25:	MusSeg $40, MG1SegData02, $65, $35, $00, $00
M2CSegHedr26:	MusSeg $40, MG1SegData03, $A9, $5D, $00, $00
M2CSegHedr27:	MusSeg $40, MG1SegData04, $79, $51, $00, $00
M2CSegHedr28:	MusSeg $40, MG1SegData05, $BD, $81, $00, $00
M2CSegHedr29:	MusSeg $40, MG1SegData06, $49, $41, $53, $00
M2CSegHedr2A:	MusSeg $40, MG2SegData00, $5B, $55, $00, $00	; BEGIN SMW Ghost House
M2CSegHedr2B:	MusSeg $40, MG2SegData01, $5D, $57, $00, $00
M2CSegHedr2C:	MusSeg $40, MG2SegData02, $5D, $57, $00, $00
M2CSegHedr2D:	MusSeg $40, MG2SegData03, $5B, $55, $00, $00
M2CSegHedr2E:	MusSeg $40, MG2SegData04, $5D, $57, $00, $00
M2CSegHedr2F:	MusSeg $40, MG2SegData05, $5D, $57, $00, $00
M2CSegHedr30:	MusSeg $40, MG2SegData06, $5B, $55, $00, $00
M2CSegHedr31:	MusSeg $40, MG2SegData07, $5B, $55, $00, $00
M2CSegHedr32:	MusSeg $40, MG2SegData08, $69, $57, $00, $00
M2CSegHedr33:	MusSeg $40, MG2SegData09, $67, $57, $00, $00
M2CSegHedr34:	MusSeg $40, MG2SegData0A, $61, $55, $00, $00
M2CSegHedr35:	MusSeg $40, MG2SegData0B, $5D, $57, $00, $00
M2CSegHedr36:	MusSeg $40, MG2SegData0C, $5D, $57, $00, $00
M2CSegHedr37:	MusSeg $40, MG2SegData0D, $5B, $55, $00, $00
M2CSegHedr38:	MusSeg $40, MG2SegData0E, $23, $21, $00, $00
M2CSegHedr39:	MusSeg $40, MRUSegData00, $75, $39, $00, $8B
M2CSegHedr3A:	MusSeg $40, MRUSegData01, $9B, $4B, $00, $BB
M2CSegHedr3B:	MusSeg $40, MRUSegData02, $85, $35, $00, $A3
M2CSegHedr3C:	MusSeg $40, MRUSegData03, $1D, $09, $00, $25
M2CSegHedr3D:	; REUSE
M2CSegHedr3E:	; REUSE
M2CSegHedr3F:	MusSeg $40, MSPSegData00, $00, $33, $00, $00	; BEGIN Special Stage
M2CSegHedr40:	MusSeg $40, MSPSegData01, $71, $3B, $00, $00
M2CSegHedr41:	MusSeg $40, MSPSegData02, $7D, $3F, $00, $00
M2CSegHedr42:	MusSeg $40, MSPSegData03, $71, $3B, $00, $00
M2CSegHedr43:	MusSeg $40, MSPSegData04, $7D, $41, $00, $00
M2CSegHedr44:	MusSeg $40, MFCSegData00, $37, $1D, $00, $00	; BEGIN NSMB Castle
M2CSegHedr45:	MusSeg $40, MFCSegData01, $59, $2D, $00, $00
M2CSegHedr46:	MusSeg $40, MFCSegData02, $19, $0F, $00, $00
M2CSegHedr47:	MusSeg $40, MFCSegData03, $45, $25, $00, $57
M2CSegHedr48:	MusSeg $40, MFCSegData04, $3D, $21, $00, $4F
M2CSegHedr49:	MusSeg $40, MFCSegData05, $47, $25, $00, $55
M2CSegHedr4A:	MusSeg $40, MFCSegData06, $5D, $37, $00, $75
M2CSegHedr4B:	MusSeg $40, MFCSegData07, $61, $35, $00, $7F
M2CSegHedr4C:	MusSeg $40, MFCSegData08, $2D, $17, $00, $51
M2CSegHedr4D:	MusSeg $40, MFCSegData09, $19, $15, $00, $35
M2CSegHedr4E:	MusSeg $40, MFCSegData0A, $3B, $33, $00, $73
M2CSegHedr4F:	MusSeg $40, MFCSegData0B, $47, $33, $00, $7F
M2CSegHedr50:	MusSeg $40, MFCSegData0C, $11, $0B, $00, $31
M2CSegHedr51:	MusSeg $40, MB2SegData00, $5F, $25, $00, $83	; BEGIN End World Boss
M2CSegHedr52:	MusSeg $40, MB2SegData01, $37, $09, $00, $6F
M2CSegHedr53:	MusSeg $40, MB2SegData02, $33, $09, $00, $5F
M2CSegHedr54:	MusSeg $40, MB2SegData03, $7B, $4D, $00, $B7
M2CSegHedr55:	MusSeg $40, MB2SegData04, $7D, $4B, $00, $BB
M2CSegHedr56:	MusSeg $40, MB2SegData05, $75, $3F, $00, $A7
M2CSegHedr57:	MusSeg $40, MB2SegData06, $6F, $33, $00, $AB
M2CSegHedr58:	MusSeg $40, MB2SegData07, $5B, $27, $00, $9B
M2CSegHedr59:	MusSeg $40, MB2SegData08, $5B, $23, $00, $9B
M2CSegHedr5A:	MusSeg $40, MB2SegData09, $7B, $43, $00, $BB
M2CSegHedr5B:	MusSeg $40, MMLSegData00, $59, $33, $81, $91	; BEGIN Mario Land 2
M2CSegHedr5C:	MusSeg $40, MMLSegData01, $31, $1F, $53, $81
M2CSegHedr5D:	MusSeg $40, MMLSegData02, $2B, $19, $49, $77
M2CSegHedr5E:	MusSeg $40, MMLSegData03, $31, $1F, $53, $81
M2CSegHedr5F:	MusSeg $40, MMLSegData04, $31, $1F, $53, $81
M2CSegHedr60:	MusSeg $40, MMLSegData05, $31, $1F, $53, $81
M2CSegHedr61:	MusSeg $40, MMLSegData06, $4D, $37, $75, $A5
M2CSegHedr62:	MusSeg $40, MMLSegData07, $61, $39, $7F, $B1
M2CSegHedr63:	MusSeg $40, MMLSegData08, $57, $33, $67, $C7
M2CSegHedr64:	MusSeg $40, MMLSegData09, $57, $33, $67, $C7
M2CSegHedr65:	MusSeg $40, MMLSegData0A, $51, $2D, $61, $C1
M2CSegHedr66:	MusSeg $40, MMLSegData0B, $35, $23, $3D, $6B
M2CSegHedr67:	MusSeg $40, MZ1SegData00, $5F, $31, $00, $00	; BEGIN Yold Ruins
M2CSegHedr68:	MusSeg $40, MZ1SegData01, $7F, $41, $00, $00
M2CSegHedr69:	MusSeg $40, MZ1SegData02, $99, $87, $00, $00
M2CSegHedr6A:	MusSeg $40, MZ1SegData03, $8F, $85, $00, $00
M2CSegHedr6B:	MusSeg $40, MZ1SegData04, $BD, $AB, $00, $00
M2CSegHedr6C:	MusSeg $40, MZ1SegData05, $00, $AB, $00, $00
M2CSegHedr6D:	MusSeg $40, MZ1SegData06, $BF, $AB, $00, $00
M2CSegHedr6E:	MusSeg $40, MZ1SegData07, $00, $AB, $00, $00
M2CSegHedr6F:	MusSeg $40, MZ1SegData08, $BD, $AB, $00, $00
M2CSegHedr70:	MusSeg $40, MZ1SegData09, $59, $55, $00, $00
M2CSegHedr71:	MusSeg $40, MZ1SegData0A, $61, $57, $00, $00
M2CSegHedr72:	MusSeg $40, MLMSegData00, $13, $09, $00, $00	; BEGIN Luigi's Mansion
M2CSegHedr73:	MusSeg $40, MLMSegData01, $9D, $4F, $00, $00
M2CSegHedr74:	MusSeg $40, MLMSegData02, $B7, $5D, $00, $00
M2CSegHedr75:	MusSeg $40, MLMSegData03, $3F, $1F, $00, $00
M2CSegHedr76:	MusSeg $40, MLMSegData04, $9B, $4F, $00, $00
M2CSegHedr77:	MusSeg $40, MLMSegData05, $7F, $41, $00, $00
M2CSegHedr78:	MusSeg $40, MLMSegData06, $BD, $61, $00, $00
M2CSegHedr79:	MusSeg $40, MLMSegData07, $81, $41, $00, $00
M2CSegHedr7A:	MusSeg $40, MLMSegData08, $4B, $27, $00, $00	
M2CSegHedr7B:	MusSeg $40, MAASegData00, $63, $37, $00, $83	; BEGIN Mario Land 2 Athletic
M2CSegHedr7C:	MusSeg $40, MAASegData01, $59, $19, $00, $79
M2CSegHedr7D:	MusSeg $40, MAASegData02, $4F, $0F, $00, $6F
M2CSegHedr7E:	MusSeg $40, MAASegData03, $6B, $2B, $00, $8B
M2CSegHedr7F:	MusSeg $40, MAASegData04, $57, $17, $00, $77
M2CSegHedr80:	MusSeg $40, MAASegData05, $65, $25, $00, $85
M2CSegHedr81:	MusSeg $40, MAASegData06, $63, $23, $00, $83
M2CSegHedr82:	MusSeg $40, MAASegData07, $5D, $1D, $00, $7D
M2CSegHedr83:	MusSeg $40, MAASegData08, $57, $17, $00, $77
M2CSegHedr84:	MusSeg $40, MAASegData09, $59, $19, $00, $79
M2CSegHedr85:	MusSeg $40, MAASegData0A, $4F, $0F, $00, $6F
M2CSegHedr86:	MusSeg $40, MAASegData0B, $6B, $2B, $00, $8B
M2CSegHedr87:	MusSeg $40, MAASegData0C, $57, $17, $00, $77
M2CSegHedr88:	MusSeg $40, MAASegData0D, $65, $25, $00, $85
M2CSegHedr89:	MusSeg $40, MAASegData0E, $65, $25, $00, $85
M2CSegHedr8A:	MusSeg $40, MAASegData0F, $65, $25, $00, $85
M2CSegHedr8B:	MusSeg $40, MAASegData10, $39, $15, $00, $51
M2CSegHedr8C:	MusSeg $40, MAASegData11, $65, $25, $00, $85
M2CSegHedr8D:	MusSeg $40, MAASegData12, $59, $19, $00, $79
M2CSegHedr8E:	MusSeg $40, MAASegData13, $65, $25, $00, $85
M2CSegHedr8F:	MusSeg $40, MAASegData14, $55, $15, $00, $75
M2CSegHedr90:	MusSeg $40, MAASegData15, $65, $25, $00, $85
M2CSegHedr91:	MusSeg $40, MAASegData16, $65, $25, $00, $85
M2CSegHedr92:	MusSeg $40, MAASegData17, $65, $25, $00, $85
M2CSegHedr93:	MusSeg $40, MAASegData18, $45, $05, $00, $65
M2CSegHedr94:	MusSeg $40, MFFSegData00, $00, $8F, $00, $A1	; BEGIN "Freeze Flame (Fire)"
M2CSegHedr95:	MusSeg $40, MFFSegData01, $00, $79, $00, $99
M2CSegHedr96:	MusSeg $40, MFFSegData02, $00, $5B, $00, $65
M2CSegHedr97:	MusSeg $40, MFFSegData03, $00, $41, $00, $51
M2CSegHedr98:	MusSeg $40, MFFSegData04, $00, $5B, $00, $6F
M2CSegHedr99:	MusSeg $40, MFFSegData05, $00, $45, $00, $59
M2CSegHedr9A:	MusSeg $40, MFFSegData06, $00, $57, $00, $61
M2CSegHedr9B:	MusSeg $40, MFFSegData07, $00, $3F, $00, $51
M2CSegHedr9C:	MusSeg $40, MFFSegData08, $00, $55, $00, $69
M2CSegHedr9D:	MusSeg $40, MFFSegData09, $53, $3F, $00, $7F
M2CSegHedr9E:	MusSeg $40, MFFSegData0A, $5D, $53, $00, $97
M2CSegHedr9F:	MusSeg $40, MFFSegData0B, $55, $43, $00, $8D
M2CSegHedrA0:	MusSeg $40, MFFSegData0C, $73, $5F, $00, $A7
M2CSegHedrA1:	MusSeg $40, MFFSegData0D, $55, $3F, $00, $8B
M2CSegHedrA2:	MusSeg $40, MFFSegData0E, $3B, $35, $00, $5F
M2CSegHedrA3:	MusSeg $40, MRCSegData00, $73, $47, $00, $B7	; BEGIN Red comet
M2CSegHedrA4:	MusSeg $40, MRCSegData01, $7F, $57, $00, $00
M2CSegHedrA5:	MusSeg $40, MRCSegData02, $57, $2F, $00, $AD
M2CSegHedrA6:	MusSeg $40, MRCSegData03, $75, $39, $00, $E1
M2CSegHedrA7:	MusSeg $40, MRCSegData04, $4D, $3B, $00, $CD
M2CSegHedrA8:	MusSeg $40, MRCSegData05, $5F, $43, $00, $DF
M2CSegHedrA9:	MusSeg $40, MRCSegData06, $61, $49, $00, $D7
M2CSegHedrAA:	MusSeg $40, MRCSegData07, $4D, $41, $00, $8D
M2CSegHedrAB:	MusSeg $40, MRCSegData08, $49, $41, $00, $89
M2CSegHedrAC:	MusSeg $40, MRCSegData09, $4D, $41, $00, $8D
M2CSegHedrAD:	MusSeg $40, MRCSegData0A, $59, $41, $00, $99
M2CSegHedrAE:	MusSeg $40, MRCSegData0B, $4D, $41, $00, $8D
M2CSegHedrAF:	MusSeg $40, MRCSegData0C, $49, $41, $00, $89
M2CSegHedrB0:	MusSeg $40, MRCSegData0D, $4F, $41, $00, $8F
M2CSegHedrB1:	MusSeg $40, MRCSegData0E, $8D, $55, $00, $B3
M2CSegHedrB2:	MusSeg $40, MRCSegData0F, $00, $55, $00, $9F
M2CSegHedrB3:	MusSeg $40, MRCSegData10, $00, $1F, $00, $3D

	; SB: New Set 3 music

	; Music in Set 3 is played by "index", which is a segment of music.
	; The index always advances, though what that index actually represents
	; may be a reused segment of music.

	; These three LUTs are to be read vertically for each Set 3 song to
	; be played ($18, $28, $38, ... $C8), so that song $18 uses a start
	; index of $00, an end index of $08, and a loop index of $01.
Music_Set2C_Starts:
	.byte $01, $09, $1F, $23, $2A, $5B, $3F, $44, $51, $67, $72, $39, $7B, $20, $94, $A3

Music_Set2C_Ends:
	.byte $08, $1E, $1F, $29, $37, $66, $43, $50, $5A, $71, $7A, $3C, $93, $22, $A2, $B3

Music_Set2C_Loops:
	.byte $01, $0A, $00, $23, $2A, $5C, $40, $47, $54, $67, $72, $39, $7C, $20, $94, $A3

	; SB: New: Bank of song
Music_Set2C_Bank:
	.byte  32,  32,  32,  32,  33,  34,  33,  31,  34,  34,  31,  32,  35,  36,  37,  37




; SB: New: Set extended music bank, and also bring it into the picture
SndMus_SetExtBank:
	STA Music_MusBank		; SB: New, extended music bank

	LDA #MMC3_8K_TO_PRG_C000	; Changing PRG ROM at C000
	STA MMC3_COMMAND 		; Set MMC3 command
	LDA Music_MusBank		; SB: New, extended music bank
	STA MMC3_PAGE	 		; Set MMC3 page

	RTS

